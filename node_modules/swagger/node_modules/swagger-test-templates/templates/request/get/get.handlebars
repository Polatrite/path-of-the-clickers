  it('should respond with {{length description}}', function(done) {
      {{#validateResponse returnType noSchema}}
      /*eslint-disable*/
      {{> schema-partial this}}

      /*eslint-enable*/
      {{/validateResponse}}
      request({
        url: '{{pathify path}}',
        {{#ifCond queryParameters queryApiKey}}
        qs: {
          {{#if queryApiKey}}{{queryApiKey.type}}: process.env.{{queryApiKey.name}}{{#if queryParameters}},
          {{/if}}{{/if}}{{#if queryParameters}}{{#each queryParameters}}{{this.name}}: 'DATA GOES HERE'{{#unless @last}},{{/unless}}{{/each}}{{/if}}
        },
        {{/ifCond}}
        method: 'GET',
        headers: {
          'Content-Type': '{{contentType}}'{{#if headerParameters}},
          'Custom-Header': { {{#each headerParameters}}
            {{this.name}}: 'DATA GOES HERE'{{#unless @last}},{{/unless}}{{/each}}
          }{{/if}}{{#if headerApiKey}},
          {{headerApiKey.type}}: process.env.{{headerApiKey.name}}{{/if}}{{#if headerSecurity}},
          Authorization: '{{headerSecurity.type}} ' + process.env.{{headerSecurity.name}}{{/if}}
        }
      },
      function(error, res, body) {
        if (error) return done(error);

        {{#is assertion 'expect'}}
        expect(res.statusCode).to.equal({{responseCode}});
        {{/is}}
        {{#is assertion 'should'}}
        res.statusCode.should.equal({{responseCode}});
        {{/is}}
        {{#is assertion 'assert'}}
        assert.equal(res.statusCode, {{responseCode}});
        {{/is}}

        {{#validateResponse returnType noSchema}}
        {{#is ../assertion 'expect'}}
        expect(validator.validate(body, schema)).to.be.true;
        {{/is}}
        {{#is ../assertion 'should'}}
        validator.validate(body, schema).should.be.true;
        {{/is}}
        {{#is ../assertion 'assert'}}
        assert.true(validator.validate(body, schema));
        {{/is}}
        {{else}}
        {{#is ../assertion 'expect'}}
        expect(body).to.equal(null); // non-json response or no schema
        {{/is}}
        {{#is ../assertion 'should'}}
        body.should.equal(null); // non-json response or no schema
        {{/is}}
        {{#is ../assertion 'assert'}}
        assert.isNull(body); // non-json response or no schema
        {{/is}}
        {{/validateResponse}}
        done();
      });
    });
